# Copyright 2018-2019 - Omar Sandoval
# SPDX-License-Identifier: GPL-3.0+

import os.path
import re
import sys


def gen_constants(input_file, output_file, header_directory=None):
    drgn_h = input_file.read()

    primitive_types = re.findall(r'^\s*DRGN_(C)_TYPE_([a-zA-Z0-9_]+)\s*[=,]',
                                 drgn_h, flags=re.MULTILINE)
    program_flags = re.findall(r'^\s*DRGN_PROGRAM_([a-zA-Z0-9_]+)\s*[=,]',
                               drgn_h, flags=re.MULTILINE)
    program_flags.remove('ENDIAN')
    qualifiers = re.findall(r'^\s*DRGN_QUALIFIER_([a-zA-Z0-9_]+)\s*[=,]',
                            drgn_h, flags=re.MULTILINE)
    type_kinds = re.findall(r'^\s*DRGN_TYPE_([a-zA-Z0-9_]+)\s*[=,]', drgn_h,
                            flags=re.MULTILINE)

    output_file.write(f"""\
/* Generated by libdrgn/build-aux/gen_constants.py. */

#include "{os.path.join(header_directory or '', 'drgnpy.h')}"

PyObject *PrimitiveType_class;
PyObject *ProgramFlags_class;
PyObject *Qualifiers_class;
PyObject *TypeKind_class;

int add_module_constants(PyObject *m)
{{
	PyObject *enum_module;
	PyObject *tmp, *item;
	int ret = -1;

	enum_module = PyImport_ImportModule("enum");
	if (!enum_module)
		return -1;

	tmp = PyList_New({len(primitive_types)});
	if (!tmp)
		goto out;
""")
    for i, (lang, primitive_type) in enumerate(primitive_types):
        output_file.write(f"""\
	item = Py_BuildValue("sk", "{lang}_{primitive_type}", DRGN_{lang}_TYPE_{primitive_type});
	if (!item)
		goto out;
	PyList_SET_ITEM(tmp, {i}, item);
""")
    output_file.write(f"""\
	PrimitiveType_class = PyObject_CallMethod(enum_module, "Enum", "sO", "PrimitiveType", tmp);
	if (!PrimitiveType_class)
		goto out;
	if (PyModule_AddObject(m, "PrimitiveType", PrimitiveType_class) == -1) {{
		Py_CLEAR(PrimitiveType_class);
		goto out;
	}}
	Py_DECREF(tmp);
	tmp = PyUnicode_FromString(drgn_PrimitiveType_DOC);
	if (!tmp)
		goto out;
	if (PyObject_SetAttrString(PrimitiveType_class, "__doc__", tmp) == -1)
		goto out;

	tmp = PyList_New({len(program_flags)});
	if (!tmp)
		goto out;
""")
    for i, program_flag in enumerate(program_flags):
        output_file.write(f"""\
	item = Py_BuildValue("sk", "{program_flag}", DRGN_PROGRAM_{program_flag});
	if (!item)
		goto out;
	PyList_SET_ITEM(tmp, {i}, item);
""")

    output_file.write(f"""\
	ProgramFlags_class = PyObject_CallMethod(enum_module, "Flag", "sO", "ProgramFlags", tmp);
	if (!ProgramFlags_class)
		goto out;
	if (PyModule_AddObject(m, "ProgramFlags", ProgramFlags_class) == -1) {{
		Py_CLEAR(ProgramFlags_class);
		goto out;
	}}
	Py_DECREF(tmp);
	tmp = PyUnicode_FromString(drgn_ProgramFlags_DOC);
	if (!tmp)
		goto out;
	if (PyObject_SetAttrString(ProgramFlags_class, "__doc__", tmp) == -1)
		goto out;
	Py_DECREF(tmp);

	tmp = PyList_New({len(qualifiers)});
	if (!tmp)
		goto out;
""")
    for i, qualifier in enumerate(qualifiers):
        output_file.write(f"""\
	item = Py_BuildValue("sk", "{qualifier}", DRGN_QUALIFIER_{qualifier});
	if (!item)
		goto out;
	PyList_SET_ITEM(tmp, {i}, item);
""")
    output_file.write(f"""\
	Qualifiers_class = PyObject_CallMethod(enum_module, "Flag", "sO", "Qualifiers", tmp);
	if (!Qualifiers_class)
		goto out;
	if (PyModule_AddObject(m, "Qualifiers", Qualifiers_class) == -1) {{
		Py_CLEAR(Qualifiers_class);
		goto out;
	}}
	Py_DECREF(tmp);
	tmp = PyUnicode_FromString(drgn_Qualifiers_DOC);
	if (!tmp)
		goto out;
	if (PyObject_SetAttrString(Qualifiers_class, "__doc__", tmp) == -1)
		goto out;
	Py_DECREF(tmp);

	tmp = PyList_New({len(type_kinds)});
	if (!tmp)
		goto out;
""")
    for i, type_kind in enumerate(type_kinds):
        output_file.write(f"""\
	item = Py_BuildValue("sk", "{type_kind}", DRGN_TYPE_{type_kind});
	if (!item)
		goto out;
	PyList_SET_ITEM(tmp, {i}, item);
""")
    output_file.write(f"""\
	TypeKind_class = PyObject_CallMethod(enum_module, "Enum", "sO", "TypeKind", tmp);
	if (!TypeKind_class)
		goto out;
	if (PyModule_AddObject(m, "TypeKind", TypeKind_class) == -1) {{
		Py_CLEAR(TypeKind_class);
		goto out;
	}}
	Py_DECREF(tmp);
	tmp = PyUnicode_FromString(drgn_TypeKind_DOC);
	if (!tmp)
		goto out;
	if (PyObject_SetAttrString(TypeKind_class, "__doc__", tmp) == -1)
		goto out;

	ret = 0;
out:
	Py_XDECREF(tmp);
	Py_XDECREF(enum_module);
	return ret;
}}
""")


if __name__ == '__main__':
    gen_constants(sys.stdin, sys.stdout,
                  sys.argv[1] if len(sys.argv) >= 2 else None)
